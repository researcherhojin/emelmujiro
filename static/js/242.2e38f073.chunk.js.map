{"version":3,"file":"static/js/242.2e38f073.chunk.js","mappings":"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","sources":["../../node_modules/unist-util-visit/lib/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-util-character/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/style-to-object/src/index.ts","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/devlop/lib/default.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/style-to-js/src/utilities.ts","../../node_modules/unist-util-is/lib/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/extend/index.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/index.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/style-to-js/src/index.ts","../../node_modules/ccount/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/remark-gfm/lib/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {createElement, useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    /* c8 ignore next 7 -- hooks are client-only. */\n    function () {\n      const file = createFile(options)\n      processor.run(processor.parse(file), file, function (error, tree) {\n        setError(error)\n        setTree(tree)\n      })\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  /* c8 ignore next -- hooks are client-only. */\n  if (error) throw error\n\n  /* c8 ignore next -- hooks are client-only. */\n  return tree ? post(tree, options) : createElement(Fragment)\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  // Wrap in `div` if there’s a class name.\n  if (options.className) {\n    tree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className: options.className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        tree.type === 'root' ? tree.children : [tree]\n      )\n    }\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n"],"names":["visit","tree","testOrVisitor","visitorOrReverse","maybeReverse","reverse","test","visitor","undefined","visitParents","node","parents","parent","length","index","children","indexOf","blankLine","partial","tokenize","effects","ok","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","String","fromCharCode","emptyOptions","toString","value","options","settings","one","includeImageAlt","includeHtml","Boolean","type","alt","all","Array","isArray","values","result","join","exports","style","iterator","styleObject","declarations","inline_style_parser_1","default","hasIterator","forEach","declaration","property","__importDefault","require","normalizeIdentifier","replace","toLowerCase","toUpperCase","unreachable","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","classifyCharacter","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","match","character","trimHyphen","concat","skipCamelCase","reactCompat","convert","castFactory","tests","checks","any","_len","arguments","_key","apply","this","anyFactory","check","checkAsRecord","nodeAsRecord","key","propsFactory","typeFactory","Error","testFunction","looksLikeANode","call","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","module","TypeError","lineno","column","updatePosition","lines","i","lastIndexOf","position","line","Position","whitespace","source","prototype","content","errorsList","error","msg","err","reason","filename","silent","re","m","exec","comments","rules","c","comment","pos","charAt","prop","val","ret","decl","decls","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","hasOwn","Object","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","deep","nameRe","nameReJsx","jsx","empty","Schema","normal","space","merge","definitions","definition","assign","normalize","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","keys","types","DefinedInfo","mask","super","mark","create","properties","normals","entries","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","cap","dash","valid","kebab","$0","camelcase","hastToReact","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","isNaN","padRight","padLeft","commas","styleToJs","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","disable","null","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","toISOString","structuredClone","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","called","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","CONTINUE","EXIT","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","style_to_object_1","utilities_1","StyleToJS","camelCase","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","patternInScope","listInScope","none","_1","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","literalWithBreak","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown"],"sourceRoot":""}