{"version":3,"file":"static/js/479.ef30cc7c.chunk.js","mappings":"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","sources":["components/chat/MessageList.tsx","components/chat/QuickReplies.tsx","components/chat/TypingIndicator.tsx","components/chat/EmojiPicker.tsx","components/chat/ChatWindow.tsx","components/chat/AdminPanel.tsx","components/chat/ChatWidget.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Check,\n  CheckCheck,\n  Clock,\n  AlertTriangle,\n  RefreshCw,\n  Download,\n  Eye,\n  Bot,\n  Info,\n} from 'lucide-react';\nimport { useChatContext } from '../../contexts/ChatContext';\nimport { format } from 'date-fns';\nimport { useTranslation } from 'react-i18next';\n\nconst MessageList: React.FC = () => {\n  const { t } = useTranslation();\n  const { messages, markAsRead, sendMessage } = useChatContext();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n  const [shouldAutoScroll, setShouldAutoScroll] = useState(true);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (shouldAutoScroll) {\n      scrollToBottom();\n    }\n  }, [messages, shouldAutoScroll]);\n\n  // Check if user has scrolled up to disable auto-scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!listRef.current) return;\n\n      const { scrollTop, scrollHeight, clientHeight } = listRef.current;\n      const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n      setShouldAutoScroll(isNearBottom);\n    };\n\n    const listElement = listRef.current;\n    if (listElement) {\n      listElement.addEventListener('scroll', handleScroll);\n      return () => listElement.removeEventListener('scroll', handleScroll);\n    }\n\n    return undefined;\n  }, []);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const formatMessageTime = (date: Date) => {\n    const now = new Date();\n    const messageDate = new Date(date);\n    const isToday = now.toDateString() === messageDate.toDateString();\n\n    if (isToday) {\n      return format(messageDate, 'HH:mm');\n    }\n    return format(messageDate, 'MM/dd HH:mm');\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sending':\n        return <Clock className=\"w-3 h-3 text-gray-400\" />;\n      case 'sent':\n        return <Check className=\"w-3 h-3 text-gray-400\" />;\n      case 'delivered':\n        return <CheckCheck className=\"w-3 h-3 text-gray-400\" />;\n      case 'read':\n        return <CheckCheck className=\"w-3 h-3 text-blue-500\" />;\n      case 'failed':\n        return <AlertTriangle className=\"w-3 h-3 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const handleRetryMessage = async (messageId: string) => {\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    try {\n      await sendMessage({\n        type: message.type,\n        content: message.content,\n        sender: message.sender,\n        file: message.file,\n      });\n    } catch (error) {\n      console.error('Failed to retry message:', error);\n    }\n  };\n\n  const handleFileDownload = (file: File | { url: string } | undefined, filename: string) => {\n    if (file instanceof File) {\n      // Create blob URL for local file\n      const url = URL.createObjectURL(file);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } else if (file?.url) {\n      // Direct download from URL\n      const a = document.createElement('a');\n      a.href = file.url;\n      a.download = filename;\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  const handleImagePreview = (file: File | { url: string } | undefined, filename: string) => {\n    if (file instanceof File) {\n      const url = URL.createObjectURL(file);\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        const newWindow = window.open();\n        if (newWindow) {\n          newWindow.document.write(`\n            <html>\n              <head><title>${filename}</title></head>\n              <body style=\"margin:0;background:#000;display:flex;align-items:center;justify-content:center;\">\n                <img src=\"${url}\" style=\"max-width:100%;max-height:100%;object-fit:contain;\" />\n              </body>\n            </html>\n          `);\n        }\n      };\n    } else if (file?.url) {\n      window.open(file.url, '_blank');\n    }\n  };\n\n  const renderMessageContent = (message: {\n    type: string;\n    content: string;\n    file?: File | { url: string; size?: number };\n  }) => {\n    switch (message.type) {\n      case 'text':\n        return <div className=\"whitespace-pre-wrap break-words\">{message.content}</div>;\n\n      case 'image':\n        return (\n          <div className=\"space-y-2\">\n            <button\n              className=\"cursor-pointer relative group rounded-lg overflow-hidden max-w-xs focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              onClick={() => handleImagePreview(message.file, message.content)}\n              type=\"button\"\n              aria-label={`Preview image: ${message.content}`}\n            >\n              {message.file instanceof File ? (\n                <img\n                  src={URL.createObjectURL(message.file)}\n                  alt={message.content}\n                  className=\"w-full h-auto max-h-48 object-cover group-hover:opacity-90 transition-opacity\"\n                />\n              ) : (\n                <div className=\"w-full h-32 bg-gray-200 dark:bg-gray-700 flex items-center justify-center rounded-lg\">\n                  <Eye className=\"w-6 h-6 text-gray-400\" />\n                </div>\n              )}\n              <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all flex items-center justify-center\">\n                <Eye className=\"w-6 h-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n              </div>\n            </button>\n            <button\n              onClick={() => handleFileDownload(message.file, message.content)}\n              className=\"flex items-center space-x-2 text-sm text-blue-600 dark:text-blue-400 hover:underline\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>{message.content}</span>\n            </button>\n          </div>\n        );\n\n      case 'file':\n        return (\n          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-3 max-w-xs\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center\">\n                <Download className=\"w-5 h-5 text-gray-500\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm font-medium truncate\">{message.content}</div>\n                {message.file?.size && (\n                  <div className=\"text-xs text-gray-500\">\n                    {(message.file.size / 1024).toFixed(1)} KB\n                  </div>\n                )}\n              </div>\n              <button\n                onClick={() => handleFileDownload(message.file, message.content)}\n                className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-600 rounded\"\n                title={t('chat.downloadFile', '파일 다운로드')}\n              >\n                <Download className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'system':\n        return (\n          <div className=\"text-center text-gray-600 dark:text-gray-400 italic\">\n            {message.content}\n          </div>\n        );\n\n      default:\n        return <div>{message.content}</div>;\n    }\n  };\n\n  const renderMessage = (\n    message: {\n      id: string;\n      type: string;\n      content: string;\n      sender: string;\n      status: string;\n      timestamp: Date;\n      agentName?: string;\n      file?: File | { url: string };\n    },\n    _index: number\n  ) => {\n    const isUser = message.sender === 'user';\n    const isSystem = message.sender === 'system';\n    const showAvatar = !isUser && !isSystem;\n    // Timestamp logic can be added here if needed in the future\n\n    if (isSystem) {\n      return (\n        <motion.div\n          key={message.id}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex justify-center my-4\"\n        >\n          <div className=\"bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-full text-sm text-gray-600 dark:text-gray-400 flex items-center space-x-2\">\n            <Info className=\"w-4 h-4\" />\n            <span>{message.content}</span>\n          </div>\n        </motion.div>\n      );\n    }\n\n    return (\n      <motion.div\n        key={message.id}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}\n        onViewportEnter={() => {\n          if (!isUser && message.status !== 'read') {\n            markAsRead(message.id);\n          }\n        }}\n      >\n        <div className={`flex max-w-[70%] ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>\n          {/* Avatar */}\n          {showAvatar && (\n            <div className=\"w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white text-sm font-semibold mr-3\">\n              {message.agentName ? message.agentName[0] : <Bot className=\"w-4 h-4\" />}\n            </div>\n          )}\n\n          {/* Message Content */}\n          <div className=\"flex flex-col\">\n            {/* Agent Name */}\n            {showAvatar && message.agentName && (\n              <div className=\"text-xs text-gray-500 mb-1 px-2\">{message.agentName}</div>\n            )}\n\n            {/* Message Bubble */}\n            <div\n              className={`\n                px-4 py-2 rounded-2xl relative\n                ${\n                  isUser\n                    ? 'bg-blue-500 text-white rounded-br-md'\n                    : 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-600 rounded-bl-md'\n                }\n                ${message.status === 'failed' ? 'border-red-300 bg-red-50 dark:bg-red-900/20' : ''}\n              `}\n            >\n              {renderMessageContent(message)}\n\n              {/* Failed Message Actions */}\n              {message.status === 'failed' && (\n                <div className=\"mt-2 flex items-center space-x-2\">\n                  <button\n                    onClick={() => handleRetryMessage(message.id)}\n                    className=\"flex items-center space-x-1 text-xs text-red-600 hover:text-red-700\"\n                  >\n                    <RefreshCw className=\"w-3 h-3\" />\n                    <span>{t('chat.retry', '다시 시도')}</span>\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Timestamp and Status */}\n            <div\n              className={`flex items-center mt-1 text-xs text-gray-500 ${isUser ? 'justify-end' : 'justify-start'}`}\n            >\n              <span className=\"mr-1\">{formatMessageTime(message.timestamp)}</span>\n              {isUser && getStatusIcon(message.status)}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  if (messages.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          <Bot className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n          <p className=\"text-lg font-medium mb-2\">\n            {t('chat.emptyState.title', '대화를 시작해보세요')}\n          </p>\n          <p className=\"text-sm\">\n            {t('chat.emptyState.subtitle', '궁금한 것이 있으시면 언제든 물어보세요!')}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className=\"flex-1 overflow-y-auto px-4 py-2 scroll-smooth\"\n      style={{ scrollBehavior: 'smooth' }}\n    >\n      <AnimatePresence>\n        {messages.map((message, index) => renderMessage(message, index))}\n      </AnimatePresence>\n\n      {/* Auto-scroll trigger */}\n      <div ref={messagesEndRef} />\n\n      {/* Scroll to bottom button */}\n      <AnimatePresence>\n        {!shouldAutoScroll && (\n          <motion.button\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            onClick={scrollToBottom}\n            className=\"fixed bottom-20 right-8 w-10 h-10 bg-blue-500 hover:bg-blue-600 text-white rounded-full shadow-lg flex items-center justify-center transition-colors\"\n            title={t('chat.scrollToBottom', '최신 메시지로 이동')}\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 14l-7 7m0 0l-7-7m7 7V3\"\n              />\n            </svg>\n          </motion.button>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { MessageSquare, Phone, HelpCircle, Settings } from 'lucide-react';\nimport { useChatContext } from '../../contexts/ChatContext';\nimport { useTranslation } from 'react-i18next';\n\ninterface QuickRepliesProps {\n  onSelect: (reply: string) => void;\n}\n\nconst QuickReplies: React.FC<QuickRepliesProps> = ({ onSelect }) => {\n  const { t } = useTranslation();\n  const { settings } = useChatContext();\n\n  const quickReplies = [\n    {\n      id: 'service',\n      text: t('chat.quickReplies.service', '서비스 문의'),\n      icon: MessageSquare,\n      color: 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-800',\n    },\n    {\n      id: 'technical',\n      text: t('chat.quickReplies.technical', '기술 지원'),\n      icon: Settings,\n      color: 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400 border-green-200 dark:border-green-800',\n    },\n    {\n      id: 'pricing',\n      text: t('chat.quickReplies.pricing', '요금 문의'),\n      icon: HelpCircle,\n      color: 'bg-amber-50 dark:bg-amber-900/20 text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800',\n    },\n    {\n      id: 'contact',\n      text: t('chat.quickReplies.contact', '연락처 문의'),\n      icon: Phone,\n      color: 'bg-purple-50 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400 border-purple-200 dark:border-purple-800',\n    },\n  ];\n\n  const handleQuickReply = (reply: string) => {\n    onSelect(reply);\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"mb-3\">\n        <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          {t('chat.quickReplies.title', '빠른 답변을 선택하세요')}\n        </h4>\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-2\">\n        {quickReplies.map((reply, index) => {\n          const IconComponent = reply.icon;\n          \n          return (\n            <motion.button\n              key={reply.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              onClick={() => handleQuickReply(reply.text)}\n              className={`\n                p-3 rounded-lg border text-left transition-all duration-200\n                hover:shadow-sm hover:scale-105 active:scale-95\n                focus:outline-none focus:ring-2 focus:ring-blue-500/30\n                ${reply.color}\n              `}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <IconComponent className=\"w-4 h-4 flex-shrink-0\" />\n                <span className=\"text-sm font-medium\">{reply.text}</span>\n              </div>\n            </motion.button>\n          );\n        })}\n      </div>\n      \n      {/* Custom Quick Replies from Settings */}\n      {settings.quickReplies.length > 4 && (\n        <div className=\"mt-3 space-y-1\">\n          {settings.quickReplies.slice(4).map((reply, index) => (\n            <motion.button\n              key={`custom-${index}`}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: (index + 4) * 0.1 }}\n              onClick={() => handleQuickReply(reply)}\n              className=\"\n                w-full p-2 text-left text-sm \n                bg-white dark:bg-gray-800 \n                border border-gray-200 dark:border-gray-700 \n                rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 \n                transition-colors\n                focus:outline-none focus:ring-2 focus:ring-blue-500/30\n              \"\n            >\n              {reply}\n            </motion.button>\n          ))}\n        </div>\n      )}\n      \n      <div className=\"mt-3 text-center\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          {t('chat.quickReplies.or', '또는 직접 메시지를 입력하세요')}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickReplies;","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Bot } from 'lucide-react';\nimport { useTranslation } from 'react-i18next';\n\nconst TypingIndicator: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"flex items-center space-x-3\">\n      {/* Avatar */}\n      <div className=\"w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white\">\n        <Bot className=\"w-4 h-4\" />\n      </div>\n      \n      {/* Typing Animation */}\n      <div className=\"bg-gray-200 dark:bg-gray-700 rounded-2xl rounded-bl-md px-4 py-3 flex items-center space-x-1\">\n        <div className=\"flex space-x-1\">\n          {[0, 1, 2].map((index) => (\n            <motion.div\n              key={index}\n              className=\"w-2 h-2 bg-gray-500 dark:bg-gray-400 rounded-full\"\n              animate={{\n                scale: [1, 1.3, 1],\n                opacity: [0.5, 1, 0.5],\n              }}\n              transition={{\n                duration: 1.4,\n                repeat: Infinity,\n                delay: index * 0.2,\n                ease: \"easeInOut\",\n              }}\n            />\n          ))}\n        </div>\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\n          {t('chat.typing', '입력 중...')}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default TypingIndicator;","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Search, X } from 'lucide-react';\nimport { useTranslation } from 'react-i18next';\n\ninterface EmojiPickerProps {\n  onSelect: (emoji: string) => void;\n  onClose: () => void;\n}\n\nconst EmojiPicker: React.FC<EmojiPickerProps> = ({ onSelect, onClose }) => {\n  const { t } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [activeCategory, setActiveCategory] = useState('smileys');\n\n  const emojiCategories = {\n    smileys: {\n      name: t('chat.emoji.smileys', '표정'),\n      emojis: [\n        '😀', '😃', '😄', '😁', '😆', '😅', '🤣', '😂', '🙂', '🙃',\n        '😉', '😊', '😇', '🥰', '😍', '🤩', '😘', '😗', '😚', '😙',\n        '😋', '😛', '😜', '🤪', '😝', '🤑', '🤗', '🤭', '🤫', '🤔',\n        '😐', '😑', '😶', '😏', '😒', '🙄', '😬', '🤐', '😷', '🤒',\n        '🤕', '🤢', '🤮', '🤧', '🥵', '🥶', '🥴', '😵', '🤯', '🤠'\n      ]\n    },\n    gestures: {\n      name: t('chat.emoji.gestures', '제스처'),\n      emojis: [\n        '👍', '👎', '👌', '🤌', '🤏', '✌️', '🤞', '🤟', '🤘', '🤙',\n        '👈', '👉', '👆', '🖕', '👇', '☝️', '👋', '🤚', '🖐️', '✋',\n        '🖖', '👏', '🙌', '🤝', '👐', '🤲', '🤜', '🤛', '✊', '👊',\n        '🙏', '✍️', '💪', '🦾', '🦵', '🦿', '💄', '💋', '👄', '👅'\n      ]\n    },\n    objects: {\n      name: t('chat.emoji.objects', '사물'),\n      emojis: [\n        '💻', '🖥️', '🖨️', '⌨️', '🖱️', '🖲️', '💽', '💾', '💿', '📀',\n        '📱', '☎️', '📞', '📟', '📠', '📺', '📻', '🎵', '🎶', '🎤',\n        '🎧', '📢', '📣', '📯', '🔔', '🔕', '📪', '📫', '📬', '📭',\n        '📮', '🗳️', '✏️', '✒️', '🖋️', '🖊️', '🖌️', '🔍', '🔎', '💡'\n      ]\n    },\n    symbols: {\n      name: t('chat.emoji.symbols', '기호'),\n      emojis: [\n        '❤️', '🧡', '💛', '💚', '💙', '💜', '🖤', '🤍', '🤎', '💔',\n        '❣️', '💕', '💞', '💓', '💗', '💖', '💘', '💝', '💟', '☮️',\n        '✝️', '☪️', '🕉️', '☸️', '✡️', '🔯', '🕎', '☯️', '☦️', '🛐',\n        '⛎', '♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐'\n      ]\n    }\n  };\n\n  const filteredEmojis = searchTerm\n    ? Object.values(emojiCategories)\n        .flatMap(category => category.emojis)\n        .filter(emoji => emoji.includes(searchTerm))\n    : emojiCategories[activeCategory as keyof typeof emojiCategories].emojis;\n\n  const handleEmojiSelect = (emoji: string) => {\n    onSelect(emoji);\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10, scale: 0.95 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, y: 10, scale: 0.95 }}\n      className=\"absolute bottom-full left-0 w-80 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl z-10 mb-2\"\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n          {t('chat.emoji.title', '이모지 선택')}\n        </h3>\n        <button\n          onClick={onClose}\n          className=\"p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n          aria-label={t('common.close', '닫기')}\n        >\n          <X className=\"w-4 h-4 text-gray-500\" />\n        </button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-3 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder={t('chat.emoji.search', '이모지 검색...')}\n            className=\"w-full pl-10 pr-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      {!searchTerm && (\n        <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n          {Object.entries(emojiCategories).map(([key, category]) => (\n            <button\n              key={key}\n              onClick={() => setActiveCategory(key)}\n              className={`flex-1 px-3 py-2 text-xs font-medium transition-colors ${\n                activeCategory === key\n                  ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 border-b-2 border-blue-500'\n                  : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'\n              }`}\n            >\n              {category.name}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Emoji Grid */}\n      <div className=\"p-3 max-h-64 overflow-y-auto\">\n        <div className=\"grid grid-cols-8 gap-1\">\n          {filteredEmojis.map((emoji, index) => (\n            <motion.button\n              key={`${emoji}-${index}`}\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: index * 0.01 }}\n              whileHover={{ scale: 1.2 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={() => handleEmojiSelect(emoji)}\n              className=\"p-2 text-xl hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500/30\"\n              title={emoji}\n            >\n              {emoji}\n            </motion.button>\n          ))}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 text-center\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          {t('chat.emoji.tip', '이모지를 클릭하여 추가하세요')}\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default EmojiPicker;","import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Send, Paperclip, Smile, Download, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { useUI } from '../../contexts/UIContext';\nimport { useChatContext } from '../../contexts/ChatContext';\nimport MessageList from './MessageList';\nimport QuickReplies from './QuickReplies';\nimport TypingIndicator from './TypingIndicator';\n// import FileUpload from './FileUpload'; // Commented out - not used\nimport EmojiPicker from './EmojiPicker';\nimport { useTranslation } from 'react-i18next';\n\nconst ChatWindow: React.FC = () => {\n  const { t } = useTranslation();\n  const { showNotification } = useUI();\n  const {\n    messages,\n    isTyping,\n    isConnected,\n    agentAvailable,\n    businessHours,\n    sendMessage,\n    startTyping,\n    stopTyping,\n  } = useChatContext();\n\n  const [inputValue, setInputValue] = useState('');\n  const [showQuickReplies, setShowQuickReplies] = useState(true);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  // const [showFileUpload, setShowFileUpload] = useState(false); // Commented out - not used\n  const [isComposing, setIsComposing] = useState(false);\n\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-focus input when chat opens\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // Handle input changes and typing indicators\n  useEffect(() => {\n    if (inputValue.trim() && !isComposing) {\n      setIsComposing(true);\n      startTyping();\n    } else if (!inputValue.trim() && isComposing) {\n      setIsComposing(false);\n      stopTyping();\n    }\n\n    return () => {\n      if (isComposing) {\n        stopTyping();\n      }\n    };\n  }, [inputValue, isComposing, startTyping, stopTyping]);\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 100) + 'px';\n    }\n  }, [inputValue]);\n\n  const handleSendMessage = async () => {\n    const message = inputValue.trim();\n    if (!message) return;\n\n    setInputValue('');\n    setShowQuickReplies(false);\n    setIsComposing(false);\n    stopTyping();\n\n    try {\n      await sendMessage({\n        type: 'text',\n        content: message,\n        sender: 'user',\n      });\n    } catch {\n      showNotification('error', t('chat.error.sendFailed', '메시지 전송에 실패했습니다.'));\n      setInputValue(message); // Restore message on error\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleQuickReply = (reply: string) => {\n    setInputValue(reply);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const handleEmojiSelect = (emoji: string) => {\n    setInputValue(prev => prev + emoji);\n    setShowEmojiPicker(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const handleFileSelect = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    const file = files[0];\n    const maxSize = 10 * 1024 * 1024; // 10MB limit\n\n    if (file.size > maxSize) {\n      showNotification(\n        'error',\n        t('chat.error.fileTooLarge', '파일 크기가 너무 큽니다. (최대 10MB)')\n      );\n      return;\n    }\n\n    try {\n      await sendMessage({\n        type: 'file',\n        content: file.name,\n        file: file,\n        sender: 'user',\n      });\n    } catch {\n      showNotification('error', t('chat.error.uploadFailed', '파일 업로드에 실패했습니다.'));\n    }\n\n    // Reset file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleExportChat = async () => {\n    try {\n      const chatData = {\n        timestamp: new Date().toISOString(),\n        messages: messages,\n        participantInfo: {\n          user: 'Customer',\n          agent: agentAvailable ? 'Support Agent' : 'Chatbot',\n        },\n      };\n\n      const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chat-transcript-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      showNotification('success', t('chat.exportSuccess', '채팅 기록을 다운로드했습니다.'));\n    } catch {\n      showNotification('error', t('chat.error.exportFailed', '채팅 기록 내보내기에 실패했습니다.'));\n    }\n  };\n\n  const canSendMessage = isConnected && inputValue.trim().length > 0;\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Connection Status Banner */}\n      {!isConnected && (\n        <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border-b border-yellow-200 dark:border-yellow-800 px-4 py-2\">\n          <div className=\"flex items-center space-x-2 text-yellow-700 dark:text-yellow-300\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <span className=\"text-xs\">\n              {t('chat.connectionStatus.reconnecting', '연결 중... 메시지는 연결 후 전송됩니다.')}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Business Hours Notice */}\n      {isConnected && !businessHours.isOpen && (\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border-b border-blue-200 dark:border-blue-800 px-4 py-2\">\n          <div className=\"flex items-center space-x-2 text-blue-700 dark:text-blue-300\">\n            <Clock className=\"w-4 h-4\" />\n            <div className=\"text-xs\">\n              <div>{t('chat.afterHours.title', '운영시간 외입니다')}</div>\n              <div className=\"text-blue-600 dark:text-blue-400\">\n                {t('chat.afterHours.message', `운영시간: ${businessHours.hours}`)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-hidden bg-gray-50 dark:bg-gray-900 relative\">\n        <MessageList />\n\n        {/* Typing Indicator */}\n        <AnimatePresence>\n          {isTyping && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              className=\"px-4 py-2\"\n            >\n              <TypingIndicator />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Quick Replies */}\n      <AnimatePresence>\n        {showQuickReplies && messages.length === 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"border-t border-gray-200 dark:border-gray-700\"\n          >\n            <QuickReplies onSelect={handleQuickReply} />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Input Area */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4\">\n        <div className=\"flex items-end space-x-2\">\n          {/* File Upload Button */}\n          <button\n            onClick={handleFileSelect}\n            disabled={!isConnected}\n            className=\"p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            title={t('chat.attachFile', '파일 첨부')}\n          >\n            <Paperclip className=\"w-5 h-5 text-gray-500\" />\n          </button>\n\n          {/* Message Input */}\n          <div className=\"flex-1 relative\">\n            <textarea\n              ref={inputRef}\n              value={inputValue}\n              onChange={e => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={\n                isConnected\n                  ? t('chat.placeholder.connected', '메시지를 입력하세요...')\n                  : t('chat.placeholder.disconnected', '연결 중...')\n              }\n              disabled={!isConnected}\n              className=\"\n                w-full px-3 py-2 pr-12 \n                border border-gray-300 dark:border-gray-600 \n                rounded-lg resize-none \n                focus:ring-2 focus:ring-blue-500 focus:border-transparent \n                bg-white dark:bg-gray-700 \n                text-gray-900 dark:text-white\n                placeholder-gray-500 dark:placeholder-gray-400\n                disabled:bg-gray-100 dark:disabled:bg-gray-800 \n                disabled:cursor-not-allowed\n                transition-colors\n              \"\n              rows={1}\n              maxLength={1000}\n            />\n\n            {/* Character Count */}\n            {inputValue.length > 800 && (\n              <div className=\"absolute -top-6 right-0 text-xs text-gray-500\">\n                {inputValue.length}/1000\n              </div>\n            )}\n\n            {/* Emoji Button */}\n            <button\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\n              title={t('chat.addEmoji', '이모지 추가')}\n            >\n              <Smile className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          </div>\n\n          {/* Send Button */}\n          <button\n            onClick={handleSendMessage}\n            disabled={!canSendMessage}\n            className=\"\n              p-2 rounded-full \n              bg-blue-500 hover:bg-blue-600 \n              disabled:bg-gray-300 dark:disabled:bg-gray-600\n              disabled:cursor-not-allowed \n              transition-colors\n            \"\n            title={t('chat.send', '전송')}\n          >\n            <Send className=\"w-5 h-5 text-white\" />\n          </button>\n        </div>\n\n        {/* Additional Options */}\n        <div className=\"flex items-center justify-between mt-2 text-xs text-gray-500\">\n          <div className=\"flex items-center space-x-4\">\n            <span>\n              {isConnected ? (\n                <>\n                  <CheckCircle className=\"w-3 h-3 inline mr-1 text-green-500\" />\n                  {t('chat.status.connected', '연결됨')}\n                </>\n              ) : (\n                <>\n                  <AlertCircle className=\"w-3 h-3 inline mr-1 text-yellow-500\" />\n                  {t('chat.status.connecting', '연결 중...')}\n                </>\n              )}\n            </span>\n          </div>\n\n          <button\n            onClick={handleExportChat}\n            disabled={messages.length === 0}\n            className=\"flex items-center space-x-1 hover:text-gray-700 dark:hover:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n            title={t('chat.exportTranscript', '대화 내용 내보내기')}\n          >\n            <Download className=\"w-3 h-3\" />\n            <span>{t('chat.export', '내보내기')}</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Emoji Picker */}\n      <AnimatePresence>\n        {showEmojiPicker && (\n          <EmojiPicker onSelect={handleEmojiSelect} onClose={() => setShowEmojiPicker(false)} />\n        )}\n      </AnimatePresence>\n\n      {/* Hidden File Input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*,application/pdf,.doc,.docx,.txt\"\n        onChange={handleFileUpload}\n        className=\"hidden\"\n      />\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Settings,\n  MessageSquare,\n  User,\n  Clock,\n  Save,\n  Plus,\n  Trash2,\n  Edit3,\n  Check,\n  X,\n  Users,\n  BarChart3,\n  RefreshCw,\n} from 'lucide-react';\nimport { useChatContext } from '../../contexts/ChatContext';\nimport { useUI } from '../../contexts/UIContext';\nimport { useTranslation } from 'react-i18next';\n\ninterface AdminPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst AdminPanel: React.FC<AdminPanelProps> = ({ isOpen, onClose }) => {\n  const { t } = useTranslation();\n  const { showNotification } = useUI();\n  const { settings, messages, businessHours, connectionId } = useChatContext();\n\n  const [activeTab, setActiveTab] = useState<'settings' | 'canned' | 'stats' | 'users'>('settings');\n  const [editingSettings, setEditingSettings] = useState(settings);\n  const [newCannedResponse, setNewCannedResponse] = useState('');\n  const [editingCannedIndex, setEditingCannedIndex] = useState<number | null>(null);\n  const [editingCannedValue, setEditingCannedValue] = useState('');\n\n  const tabs = [\n    { id: 'settings', label: t('chat.admin.settings', '설정'), icon: Settings },\n    { id: 'canned', label: t('chat.admin.cannedResponses', '자동 응답'), icon: MessageSquare },\n    { id: 'stats', label: t('chat.admin.statistics', '통계'), icon: BarChart3 },\n    { id: 'users', label: t('chat.admin.users', '사용자'), icon: Users },\n  ] as const;\n\n  const handleSaveSettings = () => {\n    try {\n      // In a real app, this would save to backend\n      localStorage.setItem('chat-admin-settings', JSON.stringify(editingSettings));\n      showNotification('success', t('chat.admin.settingsSaved', '설정이 저장되었습니다.'));\n    } catch {\n      showNotification('error', t('chat.admin.settingsSaveFailed', '설정 저장에 실패했습니다.'));\n    }\n  };\n\n  const handleAddCannedResponse = () => {\n    if (newCannedResponse.trim()) {\n      setEditingSettings(prev => ({\n        ...prev,\n        cannedResponses: [...prev.cannedResponses, newCannedResponse.trim()],\n      }));\n      setNewCannedResponse('');\n    }\n  };\n\n  const handleEditCannedResponse = (index: number) => {\n    setEditingCannedIndex(index);\n    setEditingCannedValue(editingSettings.cannedResponses[index]);\n  };\n\n  const handleSaveCannedResponse = () => {\n    if (editingCannedIndex !== null && editingCannedValue.trim()) {\n      setEditingSettings(prev => ({\n        ...prev,\n        cannedResponses: prev.cannedResponses.map((response, index) =>\n          index === editingCannedIndex ? editingCannedValue.trim() : response\n        ),\n      }));\n      setEditingCannedIndex(null);\n      setEditingCannedValue('');\n    }\n  };\n\n  const handleDeleteCannedResponse = (index: number) => {\n    setEditingSettings(prev => ({\n      ...prev,\n      cannedResponses: prev.cannedResponses.filter((_, i) => i !== index),\n    }));\n  };\n\n  const getChatStatistics = () => {\n    const totalMessages = messages.length;\n    const userMessages = messages.filter(m => m.sender === 'user').length;\n    const agentMessages = messages.filter(m => m.sender === 'agent').length;\n    const systemMessages = messages.filter(m => m.sender === 'system').length;\n\n    const today = new Date().toDateString();\n    const todayMessages = messages.filter(m => m.timestamp.toDateString() === today).length;\n\n    return {\n      totalMessages,\n      userMessages,\n      agentMessages,\n      systemMessages,\n      todayMessages,\n      averageResponseTime: '2.3분', // Mock data\n      satisfactionRating: '4.7/5', // Mock data\n    };\n  };\n\n  const stats = getChatStatistics();\n\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n      onClick={onClose}\n    >\n      <motion.div\n        initial={{ scale: 0.9, y: 20 }}\n        animate={{ scale: 1, y: 0 }}\n        exit={{ scale: 0.9, y: 20 }}\n        onClick={e => e.stopPropagation()}\n        className=\"bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <Settings className=\"w-6 h-6 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              {t('chat.admin.title', '채팅 관리자 패널')}\n            </h2>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"text-sm text-gray-500\">\n              {connectionId && (\n                <span className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                  <span>{t('chat.admin.connected', '연결됨')}</span>\n                </span>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n          {tabs.map(tab => {\n            const IconComponent = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 px-6 py-3 font-medium transition-colors ${\n                  activeTab === tab.id\n                    ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50 dark:bg-blue-900/20'\n                    : 'text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'\n                }`}\n              >\n                <IconComponent className=\"w-4 h-4\" />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\n          {/* Settings Tab */}\n          {activeTab === 'settings' && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Welcome Message */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    {t('chat.admin.welcomeMessage', '환영 메시지')}\n                  </label>\n                  <textarea\n                    value={editingSettings.welcomeMessage}\n                    onChange={e =>\n                      setEditingSettings(prev => ({ ...prev, welcomeMessage: e.target.value }))\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Max Message Length */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    {t('chat.admin.maxMessageLength', '최대 메시지 길이')}\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingSettings.maxMessageLength}\n                    onChange={e =>\n                      setEditingSettings(prev => ({\n                        ...prev,\n                        maxMessageLength: parseInt(e.target.value),\n                      }))\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                    min=\"100\"\n                    max=\"5000\"\n                  />\n                </div>\n              </div>\n\n              {/* Feature Toggles */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  {t('chat.admin.features', '기능 설정')}\n                </h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <label className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={editingSettings.allowFileUpload}\n                      onChange={e =>\n                        setEditingSettings(prev => ({ ...prev, allowFileUpload: e.target.checked }))\n                      }\n                      className=\"w-4 h-4 text-blue-600 rounded\"\n                    />\n                    <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      {t('chat.admin.allowFileUpload', '파일 업로드 허용')}\n                    </span>\n                  </label>\n\n                  <label className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={editingSettings.allowEmoji}\n                      onChange={e =>\n                        setEditingSettings(prev => ({ ...prev, allowEmoji: e.target.checked }))\n                      }\n                      className=\"w-4 h-4 text-blue-600 rounded\"\n                    />\n                    <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      {t('chat.admin.allowEmoji', '이모지 사용 허용')}\n                    </span>\n                  </label>\n\n                  <label className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={editingSettings.soundEnabled}\n                      onChange={e =>\n                        setEditingSettings(prev => ({ ...prev, soundEnabled: e.target.checked }))\n                      }\n                      className=\"w-4 h-4 text-blue-600 rounded\"\n                    />\n                    <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      {t('chat.admin.soundEnabled', '알림음 활성화')}\n                    </span>\n                  </label>\n                </div>\n              </div>\n\n              {/* Save Button */}\n              <button\n                onClick={handleSaveSettings}\n                className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\"\n              >\n                <Save className=\"w-4 h-4\" />\n                <span>{t('chat.admin.saveSettings', '설정 저장')}</span>\n              </button>\n            </div>\n          )}\n\n          {/* Canned Responses Tab */}\n          {activeTab === 'canned' && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  {t('chat.admin.cannedResponses', '자동 응답 관리')}\n                </h3>\n              </div>\n\n              {/* Add New Response */}\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={newCannedResponse}\n                  onChange={e => setNewCannedResponse(e.target.value)}\n                  placeholder={t('chat.admin.addCannedResponse', '새 자동 응답 추가...')}\n                  className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                  onKeyPress={e => e.key === 'Enter' && handleAddCannedResponse()}\n                />\n                <button\n                  onClick={handleAddCannedResponse}\n                  disabled={!newCannedResponse.trim()}\n                  className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>{t('chat.admin.add', '추가')}</span>\n                </button>\n              </div>\n\n              {/* Existing Responses */}\n              <div className=\"space-y-2\">\n                {editingSettings.cannedResponses.map((response, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-2 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n                  >\n                    {editingCannedIndex === index ? (\n                      <>\n                        <input\n                          type=\"text\"\n                          value={editingCannedValue}\n                          onChange={e => setEditingCannedValue(e.target.value)}\n                          className=\"flex-1 px-2 py-1 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-600 text-gray-900 dark:text-white\"\n                          onKeyPress={e => e.key === 'Enter' && handleSaveCannedResponse()}\n                        />\n                        <button\n                          onClick={handleSaveCannedResponse}\n                          className=\"text-green-600 hover:text-green-700 p-1\"\n                        >\n                          <Check className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => {\n                            setEditingCannedIndex(null);\n                            setEditingCannedValue('');\n                          }}\n                          className=\"text-gray-500 hover:text-gray-700 p-1\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"flex-1 text-gray-900 dark:text-white\">{response}</span>\n                        <button\n                          onClick={() => handleEditCannedResponse(index)}\n                          className=\"text-blue-600 hover:text-blue-700 p-1\"\n                        >\n                          <Edit3 className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleDeleteCannedResponse(index)}\n                          className=\"text-red-600 hover:text-red-700 p-1\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Statistics Tab */}\n          {activeTab === 'stats' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  {t('chat.admin.statistics', '채팅 통계')}\n                </h3>\n                <button className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700\">\n                  <RefreshCw className=\"w-4 h-4\" />\n                  <span>{t('chat.admin.refresh', '새로고침')}</span>\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"w-5 h-5 text-blue-600\" />\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">{stats.totalMessages}</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {t('chat.admin.totalMessages', '총 메시지')}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">{stats.userMessages}</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {t('chat.admin.userMessages', '사용자 메시지')}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Clock className=\"w-5 h-5 text-purple-600\" />\n                    <div>\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {stats.averageResponseTime}\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {t('chat.admin.avgResponseTime', '평균 응답시간')}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-amber-50 dark:bg-amber-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"w-5 h-5 text-amber-600\" />\n                    <div>\n                      <div className=\"text-2xl font-bold text-amber-600\">\n                        {stats.satisfactionRating}\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {t('chat.admin.satisfaction', '만족도')}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Business Hours Status */}\n              <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                  {t('chat.admin.businessHours', '운영 현황')}\n                </h4>\n                <div className=\"flex items-center space-x-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div\n                      className={`w-3 h-3 rounded-full ${businessHours.isOpen ? 'bg-green-500' : 'bg-red-500'}`}\n                    />\n                    <span className=\"text-gray-600 dark:text-gray-400\">\n                      {businessHours.isOpen\n                        ? t('chat.admin.currentlyOpen', '현재 운영 중')\n                        : t('chat.admin.currentlyClosed', '현재 운영 종료')}\n                    </span>\n                  </div>\n                  <div className=\"text-gray-600 dark:text-gray-400\">{businessHours.hours}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Users Tab */}\n          {activeTab === 'users' && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  {t('chat.admin.activeUsers', '활성 사용자')}\n                </h3>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>\n                    {connectionId ? '1' : '0'} {t('chat.admin.online', '온라인')}\n                  </span>\n                </div>\n              </div>\n\n              {connectionId ? (\n                <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold\">\n                      U\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900 dark:text-white\">\n                        {t('chat.admin.anonymousUser', '익명 사용자')}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {t('chat.admin.connectionId', '연결 ID')}: {connectionId.slice(0, 8)}...\n                      </div>\n                    </div>\n                    <div className=\"ml-auto\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  {t('chat.admin.noActiveUsers', '현재 활성 사용자가 없습니다.')}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default AdminPanel;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MessageCircle, X, Minimize2, Maximize2, Clock, Users } from 'lucide-react';\nimport { useUI } from '../../contexts/UIContext';\nimport { useChatContext } from '../../contexts/ChatContext';\nimport ChatWindow from './ChatWindow';\nimport AdminPanel from './AdminPanel';\nimport { useTranslation } from 'react-i18next';\n\ninterface ChatWidgetProps {\n  className?: string;\n}\n\nconst ChatWidget: React.FC<ChatWidgetProps> = ({ className }) => {\n  const { t } = useTranslation();\n  const { theme } = useUI();\n  const {\n    isOpen,\n    isMinimized,\n    unreadCount,\n    isConnected,\n    agentAvailable,\n    businessHours,\n    openChat,\n    closeChat,\n    toggleMinimize,\n    markAllAsRead,\n  } = useChatContext();\n  \n  const [isVisible, setIsVisible] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [showAdminPanel, setShowAdminPanel] = useState(false);\n  const widgetRef = useRef<HTMLDivElement>(null);\n\n  // Show widget after a delay for better UX\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Admin panel keyboard shortcut (Ctrl+Shift+A)\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.ctrlKey && event.shiftKey && event.key === 'A') {\n        event.preventDefault();\n        setShowAdminPanel(true);\n      }\n      // ESC to close admin panel\n      if (event.key === 'Escape' && showAdminPanel) {\n        setShowAdminPanel(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [showAdminPanel]);\n\n  // Handle click outside to close\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (widgetRef.current && !widgetRef.current.contains(event.target as Node)) {\n        if (isOpen && !isMinimized) {\n          // Don't auto-close, just minimize instead\n          toggleMinimize();\n        }\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n    \n    // Return undefined for the case when isOpen is false\n    return undefined;\n  }, [isOpen, isMinimized, toggleMinimize]);\n\n  // Keyboard accessibility\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      if (!isOpen) {\n        openChat();\n        markAllAsRead();\n      } else if (isMinimized) {\n        toggleMinimize();\n        markAllAsRead();\n      }\n    }\n  };\n\n  const handleToggleChat = () => {\n    if (!isOpen) {\n      openChat();\n      markAllAsRead();\n    } else if (isMinimized) {\n      toggleMinimize();\n      markAllAsRead();\n    } else {\n      toggleMinimize();\n    }\n  };\n\n  const getStatusColor = () => {\n    if (!isConnected) return theme === 'dark' ? '#ef4444' : '#dc2626'; // Red for disconnected\n    if (agentAvailable && businessHours.isOpen) return '#10b981'; // Green for available\n    return '#f59e0b'; // Amber for unavailable\n  };\n\n  const getStatusText = () => {\n    if (!isConnected) return t('chat.status.offline');\n    if (agentAvailable && businessHours.isOpen) return t('chat.status.online');\n    if (!businessHours.isOpen) return t('chat.status.afterHours');\n    return t('chat.status.busy');\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      ref={widgetRef}\n      className={`fixed bottom-4 right-4 z-50 font-sans ${className}`}\n      style={{ fontFamily: 'Pretendard, -apple-system, BlinkMacSystemFont, sans-serif' }}\n    >\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.8, y: 20 }}\n            transition={{ duration: 0.3, ease: [0.25, 0.1, 0.25, 1] }}\n            className={`mb-4 ${isMinimized ? 'pointer-events-none' : ''}`}\n          >\n            <div className={`\n              bg-white dark:bg-gray-800 \n              border border-gray-200 dark:border-gray-700 \n              rounded-lg shadow-2xl \n              w-80 h-96 \n              flex flex-col\n              ${isMinimized ? 'opacity-0 scale-95' : 'opacity-100 scale-100'}\n              transition-all duration-300\n            `}>\n              {/* Chat Header */}\n              <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-500 to-blue-600 rounded-t-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <div className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div \n                      className=\"absolute -bottom-1 -right-1 w-4 h-4 border-2 border-white rounded-full\"\n                      style={{ backgroundColor: getStatusColor() }}\n                    />\n                  </div>\n                  <div className=\"text-white\">\n                    <h3 className=\"font-semibold text-sm\">{t('chat.title', '고객 지원')}</h3>\n                    <p className=\"text-xs opacity-90\">{getStatusText()}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <button\n                    onClick={toggleMinimize}\n                    className=\"p-1 rounded-full hover:bg-white/20 transition-colors\"\n                    aria-label={isMinimized ? t('chat.maximize') : t('chat.minimize')}\n                  >\n                    {isMinimized ? (\n                      <Maximize2 className=\"w-4 h-4 text-white\" />\n                    ) : (\n                      <Minimize2 className=\"w-4 h-4 text-white\" />\n                    )}\n                  </button>\n                  <button\n                    onClick={closeChat}\n                    className=\"p-1 rounded-full hover:bg-white/20 transition-colors\"\n                    aria-label={t('chat.close')}\n                  >\n                    <X className=\"w-4 h-4 text-white\" />\n                  </button>\n                </div>\n              </div>\n\n              {/* Chat Content */}\n              {!isMinimized && <ChatWindow />}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Floating Chat Button */}\n      <motion.button\n        onClick={handleToggleChat}\n        onKeyDown={handleKeyPress}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        className={`\n          relative w-14 h-14 rounded-full shadow-lg\n          bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700\n          text-white flex items-center justify-center\n          transition-all duration-300 ease-out\n          focus:outline-none focus:ring-4 focus:ring-blue-500/30\n          ${isOpen ? 'rotate-0' : 'rotate-0 hover:rotate-3'}\n        `}\n        aria-label={isOpen ? t('chat.close') : t('chat.open')}\n        role=\"button\"\n        tabIndex={0}\n      >\n        {/* Connection Status Indicator */}\n        <div \n          className=\"absolute -top-1 -right-1 w-4 h-4 border-2 border-white rounded-full animate-pulse\"\n          style={{ backgroundColor: getStatusColor() }}\n        />\n\n        {/* Unread Messages Badge */}\n        {unreadCount > 0 && (\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"absolute -top-2 -left-2 bg-red-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center\"\n          >\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </motion.div>\n        )}\n\n        {/* Icon with animation */}\n        <motion.div\n          animate={{\n            rotate: isOpen ? 45 : 0,\n          }}\n          transition={{ duration: 0.3 }}\n        >\n          {isOpen ? (\n            <X className=\"w-6 h-6\" />\n          ) : (\n            <MessageCircle className=\"w-6 h-6\" />\n          )}\n        </motion.div>\n\n        {/* Ripple effect on hover */}\n        {isHovered && !isOpen && (\n          <motion.div\n            className=\"absolute inset-0 rounded-full bg-white/20\"\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{ scale: 1.2, opacity: 0 }}\n            transition={{ duration: 1, repeat: Infinity }}\n          />\n        )}\n      </motion.button>\n\n      {/* Quick Info Tooltip */}\n      <AnimatePresence>\n        {isHovered && !isOpen && (\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 20 }}\n            className=\"absolute right-full mr-3 top-1/2 transform -translate-y-1/2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-3 py-2 rounded-lg text-sm whitespace-nowrap shadow-lg\"\n          >\n            <div className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-4 h-4\" />\n              <span>\n                {agentAvailable && businessHours.isOpen\n                  ? t('chat.quickInfo.available', '지금 채팅하세요!')\n                  : t('chat.quickInfo.unavailable', '메시지를 남겨주세요')\n                }\n              </span>\n            </div>\n            {!businessHours.isOpen && (\n              <div className=\"flex items-center space-x-2 mt-1 text-xs opacity-80\">\n                <Clock className=\"w-3 h-3\" />\n                <span>{t('chat.businessHours', `운영시간: ${businessHours.hours}`)}</span>\n              </div>\n            )}\n            <div className=\"absolute left-full top-1/2 transform -translate-y-1/2 w-0 h-0 border-l-4 border-l-gray-900 dark:border-l-gray-100 border-y-4 border-y-transparent\" />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Admin Panel */}\n      <AnimatePresence>\n        {showAdminPanel && (\n          <AdminPanel\n            isOpen={showAdminPanel}\n            onClose={() => setShowAdminPanel(false)}\n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default ChatWidget;"],"names":["MessageList","t","useTranslation","messages","markAsRead","sendMessage","useChatContext","messagesEndRef","useRef","listRef","shouldAutoScroll","setShouldAutoScroll","useState","useEffect","scrollToBottom","handleScroll","current","scrollTop","scrollHeight","clientHeight","listElement","addEventListener","removeEventListener","_messagesEndRef$curre","scrollIntoView","behavior","formatMessageTime","date","now","Date","messageDate","toDateString","format","getStatusIcon","status","_jsx","Clock","className","Check","CheckCheck","AlertTriangle","handleFileDownload","file","filename","File","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","target","renderMessageContent","message","_message$file","type","children","content","_jsxs","onClick","handleImagePreview","img","Image","src","onload","newWindow","window","open","write","concat","alt","Eye","Download","size","toFixed","title","renderMessage","_index","isUser","sender","isSystem","showAvatar","motion","div","initial","opacity","y","animate","Info","id","onViewportEnter","agentName","Bot","async","find","m","messageId","error","console","handleRetryMessage","RefreshCw","timestamp","length","ref","style","scrollBehavior","AnimatePresence","map","index","button","scale","exit","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","_ref","onSelect","settings","quickReplies","text","icon","MessageSquare","color","Settings","HelpCircle","Phone","handleQuickReply","reply","IconComponent","transition","delay","slice","x","TypingIndicator","duration","repeat","Infinity","ease","onClose","searchTerm","setSearchTerm","activeCategory","setActiveCategory","emojiCategories","smileys","name","emojis","gestures","objects","symbols","filteredEmojis","Object","values","flatMap","category","filter","emoji","includes","X","Search","value","onChange","e","placeholder","entries","_ref2","key","whileHover","whileTap","handleEmojiSelect","ChatWindow","showNotification","useUI","isTyping","isConnected","agentAvailable","businessHours","startTyping","stopTyping","inputValue","setInputValue","showQuickReplies","setShowQuickReplies","showEmojiPicker","setShowEmojiPicker","isComposing","setIsComposing","inputRef","fileInputRef","focus","trim","height","Math","min","handleSendMessage","_unused","canSendMessage","AlertCircle","isOpen","hours","QuickReplies","handleFileSelect","disabled","Paperclip","onKeyPress","shiftKey","preventDefault","rows","maxLength","Smile","Send","_Fragment","CheckCircle","chatData","toISOString","participantInfo","user","agent","blob","Blob","JSON","stringify","split","_unused3","EmojiPicker","prev","accept","files","event","_unused2","connectionId","activeTab","setActiveTab","editingSettings","setEditingSettings","newCannedResponse","setNewCannedResponse","editingCannedIndex","setEditingCannedIndex","editingCannedValue","setEditingCannedValue","tabs","label","BarChart3","Users","handleAddCannedResponse","_objectSpread","cannedResponses","handleSaveCannedResponse","response","stats","getChatStatistics","totalMessages","userMessages","agentMessages","systemMessages","today","todayMessages","averageResponseTime","satisfactionRating","stopPropagation","tab","welcomeMessage","maxMessageLength","parseInt","max","checked","allowFileUpload","allowEmoji","soundEnabled","handleSaveSettings","localStorage","setItem","Save","Plus","handleEditCannedResponse","Edit3","_","i","handleDeleteCannedResponse","Trash2","User","theme","isMinimized","unreadCount","openChat","closeChat","toggleMinimize","markAllAsRead","isVisible","setIsVisible","isHovered","setIsHovered","showAdminPanel","setShowAdminPanel","widgetRef","timer","setTimeout","clearTimeout","handleKeyDown","ctrlKey","handleClickOutside","contains","getStatusColor","fontFamily","backgroundColor","Maximize2","Minimize2","handleToggleChat","onKeyDown","onMouseEnter","onMouseLeave","role","tabIndex","rotate","MessageCircle","AdminPanel"],"sourceRoot":""}