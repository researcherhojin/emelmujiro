{"version":3,"file":"static/js/940.54ef7de7.chunk.js","mappings":"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","sources":["../../node_modules/unist-util-visit/lib/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-util-character/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/style-to-object/src/index.ts","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/devlop/lib/default.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/style-to-js/src/utilities.ts","../../node_modules/unist-util-is/lib/index.js","../../node_modules/ccount/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/remark-gfm/lib/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/extend/index.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/index.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/style-to-js/src/index.ts"],"sourcesContent":["/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, ElementContent, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentProps, ElementType, ReactElement} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in Extract<ElementType, string>]?: ElementType<ComponentProps<Key> & ExtraProps>\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {createElement, useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    /* c8 ignore next 7 -- hooks are client-only. */\n    function () {\n      const file = createFile(options)\n      processor.run(processor.parse(file), file, function (error, tree) {\n        setError(error)\n        setTree(tree)\n      })\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  /* c8 ignore next -- hooks are client-only. */\n  if (error) throw error\n\n  /* c8 ignore next -- hooks are client-only. */\n  return tree ? post(tree, options) : createElement(Fragment)\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  // Wrap in `div` if there’s a class name.\n  if (options.className) {\n    tree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className: options.className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        tree.type === 'root' ? tree.children : [tree]\n      )\n    }\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    // @ts-expect-error\n    // React components are allowed to return numbers,\n    // but not according to the types in hast-util-to-jsx-runtime\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n"],"names":["visit","tree","testOrVisitor","visitorOrReverse","maybeReverse","reverse","test","visitor","undefined","visitParents","node","parents","parent","length","index","children","indexOf","blankLine","partial","tokenize","effects","ok","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","String","fromCharCode","emptyOptions","toString","value","options","settings","one","includeImageAlt","includeHtml","Boolean","type","alt","all","Array","isArray","values","result","join","exports","style","iterator","styleObject","declarations","inline_style_parser_1","default","hasIterator","forEach","declaration","property","__importDefault","require","normalizeIdentifier","replace","toLowerCase","toUpperCase","unreachable","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","classifyCharacter","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","match","character","trimHyphen","concat","skipCamelCase","reactCompat","convert","castFactory","tests","checks","any","_len","arguments","_key","apply","this","anyFactory","check","checkAsRecord","nodeAsRecord","key","propsFactory","typeFactory","Error","testFunction","looksLikeANode","call","ccount","source","TypeError","count","findAndReplace","ignored","ignore","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","siblings","find","change","nodes","lastIndex","exec","position","matchObject","input","stack","global","handler","RegExp","string","escape","inConstruct","notInConstruct","enterLiteralAutolink","token","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","data","assert","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","previous","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","label","email","charCodeAt","enterFootnoteCallString","buffer","enterFootnoteCall","identifier","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","resume","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","footnoteReference","state","info","tracker","createTracker","move","subexit","safe","associationId","before","gfmFootnoteToMarkdown","firstLineBlank","handlers","footnoteDefinition","shift","indentLines","containerFlow","current","mapAll","mapExceptFirst","unsafe","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","_objectSpread","defaultStringLength","serialize","toAlignment","codePointAt","map","patternInScope","pattern","listInScope","none","includes","hardBreak","_1","checkQuote","marker","quote","encodeCharacterReference","encodeInfo","outside","inside","outsideKind","insideKind","emphasis","checkEmphasis","between","betweenHead","open","betweenTail","close","attentionEncodeSurroundingInfo","html","image","suffix","imageReference","referenceType","reference","inlineCode","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","resourceLink","link","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","Math","substring","expected","longestStreak","encode","meta","definition","heading","rank","min","depth","literalWithBreak","EXIT","setext","formatHeadingAsSetext","lastIndexOf","closeAtx","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","checkListItemIndent","incrementListMarker","spread","ceil","paragraph","root","some","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","align","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","defaultHandlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","lines","delimiterStart","delimiterEnd","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","offset","column","Object","assign","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","name","self","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","resolveToPotentialGfmFootnoteCall","context","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","resolveAll","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers","EditMap","constructor","add","editMap","at","addImplementation","sort","a","b","vecs","pop","element","gfmTableAlign","inDelimiterRow","event","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","combineExtensions","document","continuation","resolveTo","flow","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","extensions","delete","gfmToMarkdown","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","module","lineno","updatePosition","i","Position","whitespace","prototype","content","errorsList","error","msg","err","reason","filename","silent","re","m","comments","rules","c","comment","pos","charAt","prop","val","ret","decl","decls","hasOwnProperty","syntaxExtension","extension","hook","left","right","existing","hasOwn","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","deep","nameRe","nameReJsx","jsx","empty","Schema","normal","space","merge","definitions","normalize","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","keys","types","DefinedInfo","mask","super","mark","create","properties","normals","entries","transform","attributes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","caseSensitiveTransform","caseInsensitiveTransform","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","language","loading","loop","low","manifest","maxLength","media","method","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","cap","dash","valid","kebab","camelcase","hastToReact","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","fatal","file","actual","note","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","estree","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","get","set","Type","rest","dashes","isNaN","padRight","padLeft","commas","styleToJs","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","isIdentifierName","computed","optional","toDash","urlAttributes","icon","SpliceBuffer","initial","RangeError","setCursor","stop","deleteCount","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","_contentTypeTextTrailing","childEvents","gaps","stream","adjust","breaks","sliceStream","defineSkip","write","contentStart","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","endOfFile","entry","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","extraResolver","chunks","tabs","bufferIndex","_index","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","factoryTitle","factoryWhitespace","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","newEvents","_inactive","group","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","tailExitIndex","headEnterIndex","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","opener","onenterdata","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreakTrailing","htmlFlowData","htmlTextData","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","setextHeadingSlurpLineEnding","atHardBreak","inReference","ancestor","decodeString","fragment","characterReferenceType","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","BigInt","Uint8Array","DataView","EMPTY","asString","shouldSkip","_ref","TYPE","json","lossy","serializer","strict","pair","valueOf","toJSON","toISOString","structuredClone","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","contents","listItemLoose","trimLines","last","trimLine","patch","applyData","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","definitionById","loose","listLoose","firstRow","tableContent","cellIndex","cells","toml","yaml","hName","hChildren","hProperties","defaultUnknownHandler","trimMarkdownSpaceStart","toHast","footnoteById","passThrough","shallow","_objectWithoutProperties","_excluded","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","called","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","style_to_object_1","utilities_1","StyleToJS","camelCase"],"sourceRoot":""}