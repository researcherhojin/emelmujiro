{"version":3,"file":"ContactPage-jUuVBm1X.js","sources":["../../src/utils/backgroundSync.ts","../../src/utils/security.ts","../../src/components/contact/ContactForm.tsx","../../src/components/contact/ContactInfo.tsx","../../src/components/contact/ServiceCards.tsx","../../src/components/pages/ContactPage.tsx"],"sourcesContent":["// Background Sync utilities\nimport logger from './logger';\n\n// Extend ServiceWorkerRegistration to include sync property\ninterface ExtendedServiceWorkerRegistration extends ServiceWorkerRegistration {\n  sync: {\n    register(tag: string): Promise<void>;\n  };\n}\n\ninterface SyncData {\n  tag: string;\n  data: unknown;\n  timestamp: number;\n}\n\n// Type for request options\ntype RequestOptions = Record<string, unknown>;\n\ninterface SyncRequest {\n  url: string;\n  options: RequestOptions;\n  timestamp: number;\n}\n\n// Check if background sync is supported\nexport function isBackgroundSyncSupported(): boolean {\n  return 'serviceWorker' in navigator && 'SyncManager' in window;\n}\n\n// Register a sync event\nexport async function registerBackgroundSync(\n  tag: string,\n  data: unknown = null\n): Promise<boolean> {\n  if (!isBackgroundSyncSupported()) {\n    logger.info('Background sync is not supported in this browser');\n    return false;\n  }\n\n  try {\n    const registration = (await navigator.serviceWorker\n      .ready) as ExtendedServiceWorkerRegistration;\n\n    // Store data in IndexedDB if provided\n    if (data) {\n      await storeSyncData(tag, data);\n    }\n\n    // Register sync\n    await registration.sync.register(tag);\n\n    logger.info(`Background sync registered: ${tag}`);\n    return true;\n  } catch (error) {\n    logger.error('Failed to register background sync:', error);\n    return false;\n  }\n}\n\n// Store data for background sync\nasync function storeSyncData(tag: string, data: unknown): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('emelmujiro-sync', 1);\n\n    request.onerror = () => reject(request.error);\n\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(['sync-data'], 'readwrite');\n      const store = transaction.objectStore('sync-data');\n\n      const putRequest = store.put({ tag, data, timestamp: Date.now() });\n\n      putRequest.onsuccess = () => resolve();\n      putRequest.onerror = () => reject(putRequest.error);\n    };\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n      if (!db.objectStoreNames.contains('sync-data')) {\n        db.createObjectStore('sync-data', { keyPath: 'tag' });\n      }\n    };\n  });\n}\n\n// Get stored sync data\nexport async function getSyncData(tag: string): Promise<SyncData | undefined> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('emelmujiro-sync', 1);\n\n    request.onerror = () => reject(request.error);\n\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(['sync-data'], 'readonly');\n      const store = transaction.objectStore('sync-data');\n\n      const getRequest = store.get(tag);\n\n      getRequest.onsuccess = () => resolve(getRequest.result);\n      getRequest.onerror = () => reject(getRequest.error);\n    };\n  });\n}\n\n// Clear sync data\nexport async function clearSyncData(tag: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('emelmujiro-sync', 1);\n\n    request.onerror = () => reject(request.error);\n\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(['sync-data'], 'readwrite');\n      const store = transaction.objectStore('sync-data');\n\n      const deleteRequest = store.delete(tag);\n\n      deleteRequest.onsuccess = () => resolve();\n      deleteRequest.onerror = () => reject(deleteRequest.error);\n    };\n  });\n}\n\n// Common sync tags\nexport const SYNC_TAGS = {\n  CONTACT_FORM: 'sync-contact-form',\n  ANALYTICS: 'sync-analytics',\n  USER_PREFERENCES: 'sync-user-preferences',\n} as const;\n\nexport type SyncTag = (typeof SYNC_TAGS)[keyof typeof SYNC_TAGS];\n\n// Queue failed API requests for retry\nexport async function queueFailedRequest(\n  url: string,\n  options: RequestOptions\n): Promise<void> {\n  const syncData: SyncRequest = {\n    url,\n    options,\n    timestamp: Date.now(),\n  };\n\n  await registerBackgroundSync('sync-failed-request', syncData);\n}\n","// 보안 관련 유틸리티 함수들\n\n/**\n * XSS 공격 방지를 위한 HTML 이스케이프\n * @param {string} str - 이스케이프할 문자열\n * @returns {string} 이스케이프된 문자열\n */\nexport const escapeHtml = (str: string): string => {\n  const div = document.createElement('div');\n  div.textContent = str;\n  return div.innerHTML;\n};\n\n/**\n * URL 유효성 검사\n * @param {string} url - 검사할 URL\n * @returns {boolean} 유효한 URL인지 여부\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url);\n    return ['http:', 'https:'].includes(urlObj.protocol);\n  } catch {\n    return false;\n  }\n};\n\n/**\n * 이메일 유효성 검사\n * @param {string} email - 검사할 이메일\n * @returns {boolean} 유효한 이메일인지 여부\n */\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * 전화번호 형식 검사\n * @param {string} phone - 검사할 전화번호\n * @returns {boolean} 유효한 전화번호인지 여부\n */\nexport const isValidPhone = (phone: string): boolean => {\n  const phoneRegex = /^[\\d\\s\\-+()]+$/;\n  return phoneRegex.test(phone) && phone.replace(/\\D/g, '').length >= 10;\n};\n\n/**\n * 입력값 길이 제한 검사\n * @param {string} input - 검사할 입력값\n * @param {number} maxLength - 최대 길이\n * @returns {boolean} 길이 제한 통과 여부\n */\nexport const isWithinLength = (input: string, maxLength: number): boolean => {\n  return input.length <= maxLength;\n};\n\n/**\n * 민감한 정보 마스킹\n * @param {string} str - 마스킹할 문자열\n * @param {number} visibleStart - 앞에서 보여줄 문자 수\n * @param {number} visibleEnd - 뒤에서 보여줄 문자 수\n * @returns {string} 마스킹된 문자열\n */\nexport const maskSensitiveInfo = (\n  str: string,\n  visibleStart: number = 3,\n  visibleEnd: number = 4\n): string => {\n  if (str.length <= visibleStart + visibleEnd) {\n    return str;\n  }\n  const start = str.slice(0, visibleStart);\n  const end = visibleEnd > 0 ? str.slice(-visibleEnd) : '';\n  const masked = '*'.repeat(str.length - visibleStart - visibleEnd);\n  return `${start}${masked}${end}`;\n};\n","import React, { memo, ChangeEvent } from 'react';\nimport { Send, WifiOff } from 'lucide-react';\n\ninterface FormData {\n  name: string;\n  email: string;\n  phone: string;\n  company: string;\n  inquiryType: 'consulting' | 'education' | 'llm' | 'data';\n  message: string;\n}\n\ninterface ContactFormProps {\n  formData: FormData;\n  isSubmitting: boolean;\n  isOnline: boolean;\n  onInputChange: (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => void;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n}\n\nconst ContactForm: React.FC<ContactFormProps> = memo(\n  ({ formData, isSubmitting, isOnline, onInputChange, onSubmit }) => {\n    return (\n      <form\n        onSubmit={onSubmit}\n        className=\"space-y-6\"\n        noValidate\n        aria-label=\"문의 양식\"\n      >\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <label\n              htmlFor=\"name\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n            >\n              이름 <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={onInputChange}\n              required\n              className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              placeholder=\"홍길동\"\n              aria-required=\"true\"\n              aria-label=\"이름 입력\"\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n            >\n              이메일 <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={onInputChange}\n              required\n              className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              placeholder=\"example@company.com\"\n              aria-required=\"true\"\n              aria-label=\"이메일 입력\"\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"phone\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n            >\n              전화번호\n            </label>\n            <input\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={formData.phone}\n              onChange={onInputChange}\n              className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              placeholder=\"010-1234-5678\"\n              aria-label=\"전화번호 입력\"\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"company\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n            >\n              회사/기관명\n            </label>\n            <input\n              type=\"text\"\n              id=\"company\"\n              name=\"company\"\n              value={formData.company}\n              onChange={onInputChange}\n              className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              placeholder=\"에멜무지로\"\n              aria-label=\"회사/기관명 입력\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"inquiryType\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n          >\n            문의 유형 <span className=\"text-red-500\">*</span>\n          </label>\n          <select\n            id=\"inquiryType\"\n            name=\"inquiryType\"\n            value={formData.inquiryType}\n            onChange={onInputChange}\n            required\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n            aria-required=\"true\"\n            aria-label=\"문의 유형 선택\"\n          >\n            <option value=\"consulting\">AI 컨설팅</option>\n            <option value=\"education\">기업 AI 교육</option>\n            <option value=\"llm\">LLM 솔루션</option>\n            <option value=\"data\">데이터 분석</option>\n          </select>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"message\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n          >\n            문의 내용 <span className=\"text-red-500\">*</span>\n          </label>\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={onInputChange}\n            required\n            rows={6}\n            className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-gray-400 dark:focus:border-gray-500 transition-colors resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n            placeholder=\"문의하실 내용을 자유롭게 작성해주세요.\"\n            aria-required=\"true\"\n            aria-label=\"문의 내용 입력\"\n          />\n        </div>\n\n        {!isOnline && (\n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-4\">\n            <div className=\"flex items-center space-x-2 text-yellow-800 dark:text-yellow-200\">\n              <WifiOff className=\"w-5 h-5\" />\n              <span className=\"font-medium\">오프라인 모드</span>\n            </div>\n            <p className=\"mt-2 text-sm text-yellow-700 dark:text-yellow-300\">\n              현재 오프라인 상태입니다. 문의는 저장되어 인터넷 연결 시 자동으로\n              전송됩니다.\n            </p>\n          </div>\n        )}\n\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-gray-900 dark:bg-white text-white dark:text-gray-900 py-4 rounded-xl font-semibold hover:bg-gray-800 dark:hover:bg-gray-100 transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center space-x-2\"\n          aria-label=\"문의 전송\"\n        >\n          {isSubmitting ? (\n            <>\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white dark:border-gray-900\" />\n              <span>전송 중...</span>\n            </>\n          ) : (\n            <>\n              <Send className=\"w-5 h-5\" />\n              <span>문의 전송</span>\n            </>\n          )}\n        </button>\n      </form>\n    );\n  }\n);\n\nContactForm.displayName = 'ContactForm';\n\nexport default ContactForm;\n","import React, { memo } from 'react';\nimport { Mail, Phone } from 'lucide-react';\n\ninterface ContactIconProps {\n  icon: React.ReactNode;\n  title: string;\n  value: string;\n  link?: string;\n}\n\nconst ContactIcon: React.FC<ContactIconProps> = memo(\n  ({ icon, title, value, link }) => (\n    <div className=\"flex items-center space-x-4\">\n      <div className=\"text-gray-600 dark:text-gray-400\">{icon}</div>\n      <div>\n        <div className=\"text-sm text-gray-500 dark:text-gray-400\">{title}</div>\n        {link ? (\n          <a\n            href={link}\n            className=\"text-lg font-medium text-gray-900 dark:text-white hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n            aria-label={`${title}: ${value}`}\n          >\n            {value}\n          </a>\n        ) : (\n          <div className=\"text-lg font-medium text-gray-900 dark:text-white\">\n            {value}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n);\n\nContactIcon.displayName = 'ContactIcon';\n\nconst ContactInfo: React.FC = memo(() => {\n  return (\n    <div className=\"space-y-6\">\n      <ContactIcon\n        icon={<Mail className=\"w-6 h-6\" />}\n        title=\"이메일\"\n        value=\"researcherhojin@gmail.com\"\n        link=\"mailto:researcherhojin@gmail.com\"\n      />\n\n      <ContactIcon\n        icon={<Phone className=\"w-6 h-6\" />}\n        title=\"전화번호\"\n        value=\"직접 문의 부탁드립니다\"\n      />\n\n      <div className=\"mt-8 p-6 bg-gray-50 dark:bg-gray-800 rounded-xl\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n          업무 시간\n        </h3>\n        <div className=\"space-y-1 text-gray-600 dark:text-gray-400\">\n          <p>월요일 - 금요일: 09:00 - 18:00</p>\n          <p>토요일 - 일요일: 휴무</p>\n        </div>\n      </div>\n\n      <div className=\"p-6 bg-blue-50 dark:bg-blue-900/20 rounded-xl\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n          빠른 응답 시간\n        </h3>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          보통 24시간 이내에 답변드립니다.\n        </p>\n      </div>\n    </div>\n  );\n});\n\nContactInfo.displayName = 'ContactInfo';\n\nexport default ContactInfo;\n","import React, { memo } from 'react';\nimport { Code, GraduationCap, MessageSquare, Database } from 'lucide-react';\n\ninterface ServiceCardProps {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  features: string[];\n}\n\nconst ServiceCard: React.FC<ServiceCardProps> = memo(\n  ({ icon, title, description, features }) => (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"text-gray-700 dark:text-gray-300\">{icon}</div>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n          {title}\n        </h3>\n      </div>\n      <p className=\"text-gray-600 dark:text-gray-400 mb-4\">{description}</p>\n      <ul className=\"space-y-2\">\n        {features.map((feature, index) => (\n          <li\n            key={index}\n            className=\"flex items-start space-x-2 text-sm text-gray-600 dark:text-gray-400\"\n          >\n            <span className=\"text-gray-400 dark:text-gray-600 mt-1\">•</span>\n            <span>{feature}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n);\n\nServiceCard.displayName = 'ServiceCard';\n\nconst ServiceCards: React.FC = memo(() => {\n  const services = [\n    {\n      icon: <Code className=\"w-6 h-6\" />,\n      title: 'AI 컨설팅',\n      description: '비즈니스 맞춤형 AI 솔루션 제공',\n      features: ['AI 도입 전략 수립', '기술 검토 및 평가', 'ROI 분석'],\n    },\n    {\n      icon: <GraduationCap className=\"w-6 h-6\" />,\n      title: '기업 AI 교육',\n      description: '실무 중심의 AI 교육 프로그램',\n      features: ['맞춤형 커리큘럼', '실습 위주 교육', '사후 멘토링'],\n    },\n    {\n      icon: <MessageSquare className=\"w-6 h-6\" />,\n      title: 'LLM 솔루션',\n      description: '대규모 언어 모델 구축 및 최적화',\n      features: ['커스텀 LLM 개발', 'Fine-tuning', 'API 통합'],\n    },\n    {\n      icon: <Database className=\"w-6 h-6\" />,\n      title: '데이터 분석',\n      description: '데이터 기반 인사이트 도출',\n      features: ['데이터 파이프라인', '예측 모델링', '시각화 대시보드'],\n    },\n  ];\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-6\">\n      {services.map((service, index) => (\n        <ServiceCard key={index} {...service} />\n      ))}\n    </div>\n  );\n});\n\nServiceCards.displayName = 'ServiceCards';\n\nexport default ServiceCards;\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  memo,\n  ChangeEvent,\n  FormEvent,\n} from 'react';\nimport { ArrowLeft, Wifi, WifiOff } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../../services/api';\nimport { registerBackgroundSync, SYNC_TAGS } from '../../utils/backgroundSync';\nimport {\n  isValidEmail,\n  isValidPhone,\n  isWithinLength,\n} from '../../utils/security';\nimport SEOHelmet from '../common/SEOHelmet';\nimport { PageLoading } from '../common/UnifiedLoading';\nimport ContactForm from '../contact/ContactForm';\nimport ContactInfo from '../contact/ContactInfo';\nimport ServiceCards from '../contact/ServiceCards';\nimport logger from '../../utils/logger';\n\ninterface FormData {\n  name: string;\n  email: string;\n  phone: string;\n  company: string;\n  inquiryType: 'consulting' | 'education' | 'llm' | 'data';\n  message: string;\n}\n\nconst ContactPage: React.FC = memo(() => {\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    inquiryType: 'consulting',\n    message: '',\n  });\n  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);\n  const [showOfflineMessage, setShowOfflineMessage] = useState<boolean>(false);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    // Simulate loading for demonstration\n    const timer = setTimeout(() => setIsLoading(false), 1000);\n\n    // Monitor online/offline status\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const handleInputChange = useCallback(\n    (\n      e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n    ) => {\n      const { name, value } = e.target;\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    },\n    []\n  );\n\n  const validateForm = useCallback((): boolean => {\n    // Validate required fields\n    if (!formData.name || !formData.email || !formData.message) {\n      alert('필수 항목을 모두 입력해주세요.');\n      return false;\n    }\n\n    // Validate email format\n    if (!isValidEmail(formData.email)) {\n      alert('올바른 이메일 형식을 입력해주세요.');\n      return false;\n    }\n\n    // Validate phone format if provided\n    if (formData.phone && !isValidPhone(formData.phone)) {\n      alert('올바른 전화번호 형식을 입력해주세요. (예: 010-1234-5678)');\n      return false;\n    }\n\n    // Validate message length (10-1000 characters)\n    if (\n      formData.message.length < 10 ||\n      !isWithinLength(formData.message, 1000)\n    ) {\n      alert('문의 내용은 10자 이상 1000자 이하로 작성해주세요.');\n      return false;\n    }\n\n    return true;\n  }, [formData]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n\n      if (!validateForm()) {\n        return;\n      }\n\n      setIsSubmitting(true);\n\n      try {\n        if (!isOnline) {\n          // Store form data for background sync\n          const syncData = {\n            ...formData,\n            timestamp: Date.now(),\n          };\n          localStorage.setItem('pendingContact', JSON.stringify(syncData));\n\n          // Register background sync\n          await registerBackgroundSync(SYNC_TAGS.CONTACT_FORM);\n\n          setShowOfflineMessage(true);\n          setTimeout(() => setShowOfflineMessage(false), 5000);\n\n          // Clear form\n          setFormData({\n            name: '',\n            email: '',\n            phone: '',\n            company: '',\n            inquiryType: 'consulting',\n            message: '',\n          });\n        } else {\n          // Online - submit form\n          try {\n            await api.createContact(formData);\n\n            // In production, use mailto as fallback\n            if (process.env.NODE_ENV === 'production') {\n              const inquiryTypeMap = {\n                consulting: 'AI 컨설팅',\n                education: '기업 AI 교육',\n                llm: 'LLM 솔루션',\n                data: '데이터 분석',\n              };\n              const subject = `[${inquiryTypeMap[formData.inquiryType]} 문의] ${formData.company || '개인'} - ${formData.name}`;\n\n              const body = `\n안녕하세요. 에멜무지로 문의드립니다.\n\n■ 문의자 정보\n- 이름: ${formData.name}\n- 이메일: ${formData.email}\n- 전화번호: ${formData.phone || '미제공'}\n- 회사/기관: ${formData.company || '개인'}\n\n■ 문의 유형: ${inquiryTypeMap[formData.inquiryType]}\n\n■ 문의 내용:\n${formData.message}\n\n감사합니다.\n              `.trim();\n\n              const mailtoLink = `mailto:${process.env.REACT_APP_CONTACT_EMAIL || 'researcherhojin@gmail.com'}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n\n              // Show success message before opening mailto\n              alert(\n                '문의 양식이 준비되었습니다. 이메일 클라이언트가 열립니다.'\n              );\n\n              // Clear form first\n              setFormData({\n                name: '',\n                email: '',\n                phone: '',\n                company: '',\n                inquiryType: 'consulting',\n                message: '',\n              });\n\n              // Open mailto link\n              window.location.href = mailtoLink;\n            } else {\n              // Development environment - API success\n              alert(\n                '문의가 성공적으로 전송되었습니다. 빠른 시일 내에 답변드리겠습니다.'\n              );\n\n              // Clear form\n              setFormData({\n                name: '',\n                email: '',\n                phone: '',\n                company: '',\n                inquiryType: 'consulting',\n                message: '',\n              });\n\n              // Navigate to home after success\n              setTimeout(() => navigate('/'), 2000);\n            }\n          } catch (error) {\n            // If there's an error, log it but still try mailto\n            logger.warn(\n              `문의 처리 중 오류: ${error instanceof Error ? error.message : 'Unknown error'}`\n            );\n\n            // Fallback to mailto\n            const inquiryTypeMap = {\n              consulting: 'AI 컨설팅',\n              education: '기업 AI 교육',\n              llm: 'LLM 솔루션',\n              data: '데이터 분석',\n            };\n            const subject = `[${inquiryTypeMap[formData.inquiryType]} 문의] ${formData.company || '개인'} - ${formData.name}`;\n\n            const body = `\n안녕하세요. 에멜무지로 문의드립니다.\n\n■ 문의자 정보\n- 이름: ${formData.name}\n- 이메일: ${formData.email}\n- 전화번호: ${formData.phone || '미제공'}\n- 회사/기관: ${formData.company || '개인'}\n\n■ 문의 유형: ${inquiryTypeMap[formData.inquiryType]}\n\n■ 문의 내용:\n${formData.message}\n\n감사합니다.\n            `.trim();\n\n            const mailtoLink = `mailto:${process.env.REACT_APP_CONTACT_EMAIL || 'researcherhojin@gmail.com'}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n            window.location.href = mailtoLink;\n          }\n        }\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [formData, isOnline, navigate, validateForm]\n  );\n\n  const handleBack = useCallback(() => {\n    navigate(-1);\n  }, [navigate]);\n\n  // Show loading skeleton while page is loading\n  if (isLoading) {\n    return <PageLoading />;\n  }\n\n  return (\n    <>\n      <SEOHelmet\n        title=\"문의하기 - AI 컨설팅 및 교육 상담\"\n        description=\"에멜무지로의 AI 컨설팅, 기업 교육, LLM 솔루션 등에 대해 문의하세요. 전문가가 빠르게 답변드립니다.\"\n        keywords=\"AI 컨설팅 문의, 기업 AI 교육 상담, LLM 솔루션 문의, 데이터 분석 상담\"\n      />\n\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n        {/* Header */}\n        <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <button\n                onClick={handleBack}\n                className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\"\n                aria-label=\"뒤로 가기\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n                <span>뒤로</span>\n              </button>\n\n              <div className=\"flex items-center space-x-2\">\n                {isOnline ? (\n                  <div className=\"flex items-center space-x-2 text-green-600 dark:text-green-400\">\n                    <Wifi className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">온라인</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2 text-yellow-600 dark:text-yellow-400\">\n                    <WifiOff className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">오프라인</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          {/* Title Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              문의하기\n            </h1>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n              AI 솔루션에 대한 궁금한 점이나 상담이 필요하신가요?\n            </p>\n          </div>\n\n          {/* Service Cards */}\n          <div className=\"mb-12\">\n            <ServiceCards />\n          </div>\n\n          {/* Contact Form and Info Grid */}\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Contact Form - 2 columns */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\n                  문의 양식\n                </h2>\n\n                <ContactForm\n                  formData={formData}\n                  isSubmitting={isSubmitting}\n                  isOnline={isOnline}\n                  onInputChange={handleInputChange}\n                  onSubmit={handleSubmit}\n                />\n              </div>\n            </div>\n\n            {/* Contact Information - 1 column */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\n                  연락처 정보\n                </h2>\n\n                <ContactInfo />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Offline Message Toast */}\n        {showOfflineMessage && (\n          <div className=\"fixed bottom-4 right-4 bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded-lg shadow-lg p-4 max-w-sm animate-slide-up\">\n            <div className=\"flex items-center space-x-2\">\n              <WifiOff className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />\n              <div>\n                <p className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                  오프라인 저장됨\n                </p>\n                <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                  인터넷 연결 시 자동으로 전송됩니다.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n});\n\nContactPage.displayName = 'ContactPage';\n\nexport default ContactPage;\n"],"names":["isBackgroundSyncSupported","registerBackgroundSync","tag","data","logger","registration","storeSyncData","error","resolve","reject","request","putRequest","event","db","SYNC_TAGS","isValidEmail","email","isValidPhone","phone","isWithinLength","input","maxLength","ContactForm","memo","formData","isSubmitting","isOnline","onInputChange","onSubmit","jsxs","jsx","WifiOff","Fragment","Send","ContactIcon","icon","title","value","link","ContactInfo","Mail","Phone","ServiceCard","description","features","feature","index","ServiceCards","services","Code","GraduationCap","MessageSquare","Database","service","ContactPage","setFormData","useState","setIsOnline","showOfflineMessage","setShowOfflineMessage","setIsSubmitting","isLoading","setIsLoading","navigate","useNavigate","useEffect","timer","handleOnline","handleOffline","handleInputChange","useCallback","e","name","prev","validateForm","handleSubmit","api","inquiryTypeMap","subject","body","mailtoLink","define_process_env_default","syncData","handleBack","PageLoading","SEOHelmet","ArrowLeft","Wifi"],"mappings":"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"}