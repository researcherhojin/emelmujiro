{"version":3,"file":"NotificationPrompt-CgHeq-el.js","sources":["../../src/utils/pushNotifications.ts","../../src/components/common/NotificationPrompt.tsx"],"sourcesContent":["// Push Notification utilities\nimport logger from './logger';\n\nconst PUBLIC_VAPID_KEY =\n  process.env.REACT_APP_VAPID_PUBLIC_KEY || 'YOUR_PUBLIC_VAPID_KEY';\n\ninterface NotificationOptions {\n  icon?: string;\n  badge?: string;\n  vibrate?: number[];\n  tag?: string;\n  renotify?: boolean;\n  requireInteraction?: boolean;\n  body?: string;\n  data?: unknown;\n}\n\n// URL-safe base64 decode\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const buffer = new ArrayBuffer(rawData.length);\n  const outputArray = new Uint8Array(buffer);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n// Check if push notifications are supported\nexport function isPushNotificationSupported(): boolean {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\n// Check if user has granted permission\nexport function isPushNotificationEnabled(): boolean {\n  if (!isPushNotificationSupported()) return false;\n  return Notification.permission === 'granted';\n}\n\n// Request notification permission\nexport async function requestNotificationPermission(): Promise<boolean> {\n  if (!isPushNotificationSupported()) {\n    logger.info('Push notifications are not supported in this browser');\n    return false;\n  }\n\n  const permission = await Notification.requestPermission();\n  return permission === 'granted';\n}\n\n// Subscribe to push notifications\nexport async function subscribeToPushNotifications(): Promise<PushSubscription> {\n  if (!isPushNotificationSupported()) {\n    throw new Error('Push notifications are not supported');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new Error('Notification permission not granted');\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.ready;\n\n    // Check if already subscribed\n    let subscription = await registration.pushManager.getSubscription();\n\n    if (!subscription) {\n      // Subscribe to push notifications\n      subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(\n          PUBLIC_VAPID_KEY\n        ) as unknown as ArrayBuffer,\n      });\n    }\n\n    return subscription;\n  } catch (error) {\n    logger.error('Failed to subscribe to push notifications:', error);\n    throw error;\n  }\n}\n\n// Unsubscribe from push notifications\nexport async function unsubscribeFromPushNotifications(): Promise<boolean> {\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.getSubscription();\n\n    if (subscription) {\n      await subscription.unsubscribe();\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    logger.error('Failed to unsubscribe from push notifications:', error);\n    throw error;\n  }\n}\n\n// Send subscription to server\nexport async function sendSubscriptionToServer(\n  subscription: PushSubscription\n): Promise<unknown> {\n  try {\n    const response = await fetch('/api/notifications/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(subscription),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to send subscription to server');\n    }\n\n    return await response.json();\n  } catch (error) {\n    logger.error('Failed to send subscription to server:', error);\n    throw error;\n  }\n}\n\n// Show local notification\nexport async function showNotification(\n  title: string,\n  options: NotificationOptions = {}\n): Promise<void> {\n  if (!isPushNotificationEnabled()) {\n    logger.info('Push notifications are not enabled');\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.ready;\n\n    const defaultOptions: NotificationOptions = {\n      icon: '/logo192.png',\n      badge: '/logo192.png',\n      vibrate: [200, 100, 200],\n      tag: 'emelmujiro-notification',\n      renotify: true,\n      requireInteraction: false,\n      ...options,\n    };\n\n    await registration.showNotification(title, defaultOptions);\n  } catch (error) {\n    logger.error('Failed to show notification:', error);\n    throw error;\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Bell, X, Settings } from 'lucide-react';\nimport {\n  isPushNotificationSupported,\n  requestNotificationPermission,\n  subscribeToPushNotifications,\n} from '../../utils/pushNotifications';\nimport logger from '../../utils/logger';\n\n// Type for notification permission (removed - unused)\n\ninterface NotificationPromptProps {\n  onClose?: () => void;\n  className?: string;\n}\n\ninterface NotificationSettings {\n  blog: boolean;\n  contact: boolean;\n  system: boolean;\n  marketing: boolean;\n}\n\nconst NotificationPrompt: React.FC<NotificationPromptProps> = ({\n  onClose,\n  className = '',\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  // Permission state tracking removed - using Notification.permission directly\n  const [settings, setSettings] = useState<NotificationSettings>({\n    blog: true,\n    contact: true,\n    system: true,\n    marketing: false,\n  });\n\n  useEffect(() => {\n    // Check if notifications are supported and not yet requested\n    if (isPushNotificationSupported()) {\n      // Permission state is checked directly from Notification.permission\n\n      // Show prompt if permission is default and user hasn't dismissed it recently\n      const dismissed = localStorage.getItem('notification-prompt-dismissed');\n      const dismissedTime = dismissed ? parseInt(dismissed) : 0;\n      const daysSinceDismissed =\n        (Date.now() - dismissedTime) / (1000 * 60 * 60 * 24);\n\n      if (Notification.permission === 'default' && daysSinceDismissed > 3) {\n        setIsVisible(true);\n      }\n    }\n\n    // Load saved settings\n    const savedSettings = localStorage.getItem('notification-settings');\n    if (savedSettings) {\n      try {\n        setSettings(JSON.parse(savedSettings));\n      } catch (error) {\n        logger.error('Failed to load notification settings:', error);\n      }\n    }\n  }, []);\n\n  const handleEnableNotifications = async () => {\n    setIsLoading(true);\n\n    try {\n      const granted = await requestNotificationPermission();\n      // Permission state is checked directly from Notification.permission\n\n      if (granted) {\n        // Subscribe to push notifications\n        await subscribeToPushNotifications();\n\n        // Save settings to localStorage (server implementation pending)\n        localStorage.setItem('notification-settings', JSON.stringify(settings));\n\n        // Show success message\n        setIsVisible(false);\n        if (onClose) onClose();\n      }\n    } catch (error) {\n      logger.error('Failed to enable notifications:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    // Remember that user dismissed the prompt\n    localStorage.setItem(\n      'notification-prompt-dismissed',\n      Date.now().toString()\n    );\n    setIsVisible(false);\n    if (onClose) onClose();\n  };\n\n  const handleSettingChange = (\n    key: keyof NotificationSettings,\n    value: boolean\n  ) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n\n    // Save to localStorage immediately\n    localStorage.setItem('notification-settings', JSON.stringify(newSettings));\n  };\n\n  const saveNotificationSettings = async (settings: NotificationSettings) => {\n    try {\n      // This would send settings to your backend\n      const response = await fetch('/api/notifications/preferences/', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(settings),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save notification settings');\n      }\n    } catch (error) {\n      logger.error('Failed to save notification settings:', error);\n      // Still allow local storage to work even if server fails\n    }\n  };\n\n  if (!isPushNotificationSupported() || !isVisible) {\n    return null;\n  }\n\n  if (showSettings) {\n    return (\n      <div\n        className={`fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4 ${className}`}\n      >\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n          <div className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                알림 설정\n              </h3>\n              <button\n                onClick={() => setShowSettings(false)}\n                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                aria-label=\"설정 닫기\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    블로그 업데이트\n                  </label>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    새 글이 게시될 때 알림\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={settings.blog}\n                  onChange={(e) =>\n                    handleSettingChange('blog', e.target.checked)\n                  }\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    문의 응답\n                  </label>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    문의에 대한 응답 알림\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={settings.contact}\n                  onChange={(e) =>\n                    handleSettingChange('contact', e.target.checked)\n                  }\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    시스템 알림\n                  </label>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    중요한 시스템 업데이트\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={settings.system}\n                  onChange={(e) =>\n                    handleSettingChange('system', e.target.checked)\n                  }\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    마케팅 정보\n                  </label>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    프로모션 및 이벤트 정보\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={settings.marketing}\n                  onChange={(e) =>\n                    handleSettingChange('marketing', e.target.checked)\n                  }\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-6 flex space-x-3\">\n              <button\n                onClick={() => {\n                  saveNotificationSettings(settings);\n                  setShowSettings(false);\n                }}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg\n                           font-medium transition-colors duration-200\"\n              >\n                저장\n              </button>\n              <button\n                onClick={() => setShowSettings(false)}\n                className=\"flex-1 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700\n                           dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200\n                           py-2 px-4 rounded-lg font-medium transition-colors duration-200\"\n              >\n                취소\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`fixed bottom-4 right-4 z-50 bg-white dark:bg-gray-800 rounded-lg shadow-xl\n                     p-6 max-w-sm border border-gray-200 dark:border-gray-700 ${className}`}\n    >\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n            <Bell className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n          </div>\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white mb-1\">\n            알림 허용하기\n          </h3>\n          <p className=\"text-xs text-gray-600 dark:text-gray-300 mb-4\">\n            새 블로그 글과 중요한 업데이트를 놓치지 마세요. 언제든지 설정에서\n            변경할 수 있습니다.\n          </p>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleEnableNotifications}\n              disabled={isLoading}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400\n                         text-white py-2 px-3 rounded text-xs font-medium\n                         transition-colors duration-200 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? '설정 중...' : '허용'}\n            </button>\n\n            <button\n              onClick={() => setShowSettings(true)}\n              className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400\n                         dark:hover:text-gray-200 transition-colors duration-200\"\n              aria-label=\"알림 설정\"\n            >\n              <Settings className=\"w-4 h-4\" />\n            </button>\n\n            <button\n              onClick={handleDismiss}\n              className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400\n                         dark:hover:text-gray-200 transition-colors duration-200\"\n              aria-label=\"나중에\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationPrompt;\n"],"names":["PUBLIC_VAPID_KEY","define_process_env_default","urlBase64ToUint8Array","base64String","padding","base64","rawData","buffer","outputArray","i","isPushNotificationSupported","requestNotificationPermission","logger","subscribeToPushNotifications","registration","subscription","error","NotificationPrompt","onClose","className","isVisible","setIsVisible","useState","isLoading","setIsLoading","showSettings","setShowSettings","settings","setSettings","useEffect","dismissed","dismissedTime","daysSinceDismissed","savedSettings","handleEnableNotifications","handleDismiss","handleSettingChange","key","value","newSettings","saveNotificationSettings","jsx","jsxs","X","e","Bell","Settings"],"mappings":"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"}